name: CI Pipeline

on:
  push:
    branches: [ main, develop ]

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend, frontend]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.13
        if: matrix.component == 'backend'
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Set up Node.js 20
        if: matrix.component == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./frontend/package.json

      - name: Install uv
        if: matrix.component == 'backend'
        run: pip install uv

      - name: Cache Python dependencies
        if: matrix.component == 'backend'
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/uv
            backend/.venv
          key: ${{ runner.os }}-uv-${{ hashFiles('backend/pyproject.toml') }}

      - name: Install backend dependencies
        if: matrix.component == 'backend'
        working-directory: backend
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: Install frontend dependencies
        if: matrix.component == 'frontend'
        working-directory: frontend
        run: npm ci

      - name: Run backend tests and lint
        if: matrix.component == 'backend'
        working-directory: backend
        run: |
          source .venv/bin/activate
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          pytest
          black --check .
          isort --check-only .

      - name: Run frontend tests and lint
        if: matrix.component == 'frontend'
        working-directory: frontend
        run: |
          npm run test:ci
          npm run lint
          npm run format:check

  build:
    runs-on: ubuntu-latest
    needs: test-and-lint
    strategy:
      matrix:
        component: [backend, frontend]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build ${{ matrix.component }} image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          file: ./${{ matrix.component }}/Dockerfile
          push: false
          tags: image-converter-${{ matrix.component }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  e2e:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./frontend/package.json
      - name: Install uv
        run: pip install uv
      - name: Prepare backend environment for E2E
        working-directory: backend
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -e ".[dev]"
      - name: Prepare frontend environment for E2E
        working-directory: frontend
        run: npm ci
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
      - name: Run E2E tests
        env:
          CI: true
          GITHUB_ACTIONS: true
        run: |
          chmod +x ./run_and_test.sh
          ./run_and_test.sh

  push-to-harbor:
    runs-on: ubuntu-latest
    needs: e2e
    strategy:
      matrix:
        component: [backend, frontend]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Harbor
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.HARBOR_REGISTRY }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}
      - name: Push ${{ matrix.component }} image
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.component }}
          file: ./${{ matrix.component }}/Dockerfile
          push: true
          tags: |
            ${{ secrets.HARBOR_REGISTRY }}/${{ secrets.HARBOR_PROJECT }}/image-converter-${{ matrix.component }}:latest
            ${{ secrets.HARBOR_REGISTRY }}/${{ secrets.HARBOR_PROJECT }}/image-converter-${{ matrix.component }}:${{ github.sha }}

