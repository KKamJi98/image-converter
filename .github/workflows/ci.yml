name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Set up Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: ./frontend/package.json
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: backend/.venv
        key: poetry-${{ hashFiles('backend/poetry.lock') }}
    
    - name: Install backend dependencies
      working-directory: backend
      run: poetry install
    
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Run backend tests
      working-directory: backend
      run: poetry run pytest
    
    - name: Run frontend tests
      working-directory: frontend
      run: npm test -- --coverage --watchAll=false

  lint:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Set up Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: ./frontend/package.json
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Install backend dependencies
      working-directory: backend
      run: poetry install
    
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Run backend linting
      working-directory: backend
      run: |
        poetry run black --check .
        poetry run isort --check-only .
    
    - name: Run frontend linting
      working-directory: frontend
      run: |
        npm run lint
        npm run format:check

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: image-converter-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: image-converter-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  e2e:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run E2E tests
      run: |
        chmod +x ./run_and_test.sh
        ./run_and_test.sh
